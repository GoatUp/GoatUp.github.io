[{"categories":["Salesforce"],"content":"FAQ Q：page 修改后没反应？ A：检查 page controller 指向的页面是否正确，也可在 Apex クラス 中查询。 Q：添加查询功能时，多条件会报错？ A：仔细检查是否多或少一个 + 号。 ","date":"2021-07-12","objectID":"/salesforce-visualforce/:1:0","tags":["Salesforce","Visualforce"],"title":"Salesforce Visualforce","uri":"/salesforce-visualforce/"},{"categories":["Salesforce"],"content":"第1章 构筑 Salesforce 开发环境 ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:0","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"1.1 VSCode 安装 点击 VSCode 下载 ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:1","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"1.2 Salesforce CLI 点击 Salesforce CLI 下载 ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:2","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"1.3 Salesforce Extensions for VSCode ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:3","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"1.4 安装语言包 非必需项 ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:4","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"1.5 JDK 安装 创建运行 Apex 项目时，需要 JVM 环境。 点击 JDK 下载后，在 VSCode 键入 \u003eOpen Setting，将对应的环境配置加到最后。 ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:1:5","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"第2章 连接 Salesforce 环境 以下操作均在 VSCode 中执行！ ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:2:0","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"2.1 Create Project with Manifest 下载、安装、配置完 VSCode 后， 键入 \u003esfdx Create Project with Manifest （可简写）； 选择 Standard Standard project template (default) 环境； 键入项目名称后选择项目文件夹。 ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:2:1","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"2.2 Authorize an Org 键入 \u003eAuthorize an Org ； 选择 Project Default 或 Production 均可； 回车并登录。 ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:2:2","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"2.3 差分工具 终端键入 \u003esfdx plugins:install @salesforce/sfdx-diff ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:2:3","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"扩展 VSCode 左下角可选择组织环境 ","date":"2021-07-11","objectID":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/:3:0","tags":["VSCode","Salesforce"],"title":"VSCode构建Salesforce开发环境","uri":"/vscode%E6%9E%84%E5%BB%BAsalesforce%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"categories":["Salesforce"],"content":"Apex 是 Salesforce.com 开发的专有语言。类似于 Java 语法，也是一种强类型，面向对象的编程语言。 ","date":"2021-07-09","objectID":"/salesforce-apex/:0:0","tags":["Salesforce","Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"第1章 了解 Apex 语法 Apex 代码通常包含许多我们可能从其他编程语言熟悉的东西。 变量声明：作为强类型语言，必须使用 Apex 中的数据类型声明每个变量。如下面的代码（下面的截图）所示，lstAcc 被声明为数据类型为帐户列表。 SOQL 查询：这将用于从 Salesforce 数据库获取数据。下面屏幕截图中显示的查询是从 Account 对象获取数据。 循环声明：此循环语句用于迭代一个列表或迭代一段代码指定的次数。在下面的屏幕截图中显示的代码中，迭代将与 lstAcc 中的记录数相同。 流控制语句：If 语句用于此代码中的流控制。基于特定条件，决定是执行还是停止执行特定代码段。例如，在下面显示的代码中，它检查列表是否为空或者它包含记录。 DML 语句：对数据库中的记录执行记录插入，更新，上升，删除操作。例如，以下代码正在使用新字段值更新帐户。 以下是 Apex 代码段的外观示例。我们将在本教程中进一步研究所有这些 Apex 编程概念。","date":"2021-07-09","objectID":"/salesforce-apex/:1:0","tags":["Salesforce","Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"第2章 数据类型 变量命名规则： 小写字母开头，开头不能使用下划线 ‘_’ 驼峰命名法，比如 Integer stuNumber ","date":"2021-07-09","objectID":"/salesforce-apex/:2:0","tags":["Salesforce","Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"2.1 原始数据类型 Apex 和 SOAP API 使用相同的原始数据类型，如下： Apex Developer Guide | Primitive | Categories | Description | | :-------: | :-------------: | ---------------------------------------------------- | | Integer | 32-bit | Integer i = 1; | | ID | 16/18-character | ID id = '00300000003T2PGAA0'; | | Long | 64-bit | Long l = 12345678L; | | Double | 64-bit | Double d = 3.14159; | | Decimal | number | ? | | String | string | String s = 'lazy dog' | | Boolean | true/false/null | Boolean b = True; | | Blob | blob | Blob b = Blob.valueOf('Data'); | | Object | any data | ? | | Time | time | Time t = Time.newInstance(1,2,3,0); | | Date | day | Date d = Date.newInstance(1960,2,17); | | Datetime | datetime | Datetime dt = Datetime.newInstance(1960,2,17,1,2,3); | # 标准对象使用的是格林威治时间，自定义对象需调整 # Datetime = Datetime.now().addHours(9); ","date":"2021-07-09","objectID":"/salesforce-apex/:2:1","tags":["Salesforce","Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Salesforce"],"content":"2.2 集合类型","date":"2021-07-09","objectID":"/salesforce-apex/:2:2","tags":["Salesforce","Apex"],"title":"Salesforce Apex","uri":"/salesforce-apex/"},{"categories":["Windows"],"content":"fork 以空间换时间，统一开发环境的基础【防止手贱】。 ","date":"2021-07-05","objectID":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/:0:0","tags":["Windows","Chocolatey","choco"],"title":"Windows包管理器 - Chocolatey","uri":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/"},{"categories":["Windows"],"content":"安装 choco 以管理员权限运行 cmd 或 powershell cmd运行： @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" \u0026\u0026 SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" powershell运行： Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) 安装完成后，运行 choco 或 choco -? 检查是否安装正确。 ","date":"2021-07-05","objectID":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/:1:0","tags":["Windows","Chocolatey","choco"],"title":"Windows包管理器 - Chocolatey","uri":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/"},{"categories":["Windows"],"content":"choco 安装软件 以管理员权限运行 cmd 或 powershell 执行过程中会提示你是否接受软件的安装协议等，输入 -y，可免去这一步，如下： choco install \u003cpackagename\u003e -y # 或 cinst \u003cpackagename\u003e -y ​ 安装 JDK8： ​ choco install jdk8 ​ 安装 git： ​ cinst git.install ​ 安装chrome： ​ cinst googlechrome ​ 安装7-zip： ​ cinst 7zip.install ​ 更多安装包，请搜索这里： ​ Chocolatey Gallery | Packages ​ 其他用法： ​ cinst jdk8 googlechrome vscode 7zip //一次安装多个软件包 ​ cinst nodejs.install –version 0.10.35 //安装指定版本 ​ cinst dev-package.config //安装config文件内描述的所有软件包 ​ dev-package.config： \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cpackages\u003e \u003cpackage id=\"jdk8\" /\u003e \u003cpackage id=\"googlechrome\" version=\"71.0.3578.98\" /\u003e \u003cpackage id=\"vscode\" /\u003e \u003cpackage id=\"7zip\" /\u003e \u003c/packages\u003e ","date":"2021-07-05","objectID":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/:2:0","tags":["Windows","Chocolatey","choco"],"title":"Windows包管理器 - Chocolatey","uri":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/"},{"categories":["Windows"],"content":"安装报错 Error: Error building site: TOCSS: failed to transform “main.scss” 解决办法：你需要安装 Hugo 扩展包 choco install hugo-extended -y ","date":"2021-07-05","objectID":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/:3:0","tags":["Windows","Chocolatey","choco"],"title":"Windows包管理器 - Chocolatey","uri":"/windows%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-chocolatey/"},{"categories":["Free-Ride"],"content":"fork ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:0:0","tags":["image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"1 前言 云端，便捷，无限容量，稳定不跑路，免费最重要。 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:1:0","tags":["image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"1.1 整体架构 GitHub + Typora + PicGo ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:1:1","tags":["image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"1.2 软件下载 略：太简单，自己去搜。 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:1:2","tags":["image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"2 GitHub 创个库，当作图床，取名困难就 image。 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:2:0","tags":["image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"2.1 获取令牌 也就是 Token，对外公钥，可访问API，步骤如下： Settings Developer settings Personal access tokens Generate new token Select scopes时，看不懂可全选。 生成的 Token 只显示一次。 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:2:1","tags":["image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"3 PicGo 安装后界面如下：对应设置即可；","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:3:0","tags":["image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"4 Typora 自定义安装后，按图配置：","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:4:0","tags":["image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"4.1 上传失败解决办法 换个IP，WIFI或4G Failed to fetch 时，修改 Server Port 为36677 ","date":"2021-07-05","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/:4:1","tags":["image"],"title":"白嫖系列之图床","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%BE%E5%BA%8A/"},{"categories":["Free-Ride"],"content":"fork ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:0:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"前言 云端，省事，不花钱，新鲜感过后低维护成本。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:1:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅰ 整体架构 GitHub Pages + Hugo + GitHub Actions + Domain ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:1:1","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅱ 工作流程 整个方案流程大致如下： 用 MarkDown 格式写作 推送文章源码至 Github 仓库 触发 Github Actions 并生成 HTML 静态文件发布到 Pages 进行托管 （可选）绑定自定义域名 博客编辑器推荐 Typora，域名注册和解析推荐 NameSoli，文章推送最好写个 deploy.bat。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:1:2","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"GitHub 创建仓库 推荐两种方式创建仓库（以我的 goatup 账号为例）： 直接把 goatup.github.io 作为远程仓库发布； 将源码、git pages、照片和其他资源分为多个仓库，例如： 源码： goatup.github.io.source //权限设为 private 页面： goatup.github.io //权限设为 public 照片： blog-images //图床 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅰ 创建 Github Pages 创建 goatup.github.io 仓库，仓库名必须为 [username].github.io，必须使用 main 分支，默认权限 Public： ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:1","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅱ 创建源码仓库 仓库名随意，分支随意，权限随意： ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:2","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅲ 为两个仓库绑定 SSH Key 当我们通过 Git 提交源码到 goatup.github.io.source ，Github Actions 会编译成静态文件并通过 Git Pull 到 goatup.github.io ，因此这一步需要 Git 账号认证。 # 打开 cmd, Powershell, git shell 任意一个，输入 ssh-keygen -t rsa -C \"your email address\" 这两步比较重要，我们要将生成的 Public Key 添加到 goatup.github.io 仓库，勾选可写权限：然后将 Private Key 添加到 goatup.github.io.source 仓库，这里 Secrets 变量名记住哈, 后面会用到。","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:3","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅳ 为 Hugo 初始化做准备 将 goatup.github.io.source 仓库克隆到本地，开始初始化 Hugo 系统。 # 选取一个目标 cd O:\\Documents\\ # 克隆 source 仓库 git clone git@github.com:username/goatup.github.io.source.git # 如果报错，则使用下面这条命令 git clone https://username:password@github.com/username/repo_name.git # 进入仓库 cd goatup.github.io.source ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:2:4","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Hugo初始化 使用 Hugo 生成静态博客站点非常简单，具体的步骤和用法可以参考官方文档的 Quick Start。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅰ 两种方式安装Hugo choco install hugo -y //用户需安装 Chocolatey 在 这个页面 选择适合的版本下载，然后设置 PATH 即可。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:1","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅱ 初始化 创建一个新的站点。 # 在当前目录生成 Hugo 源码 hugo new site . --force //在非空目录中初始化 ​ 这会生成一个特定目录结构的项目文件夹，用来维护所有的站点内容，后续的操作和命令都会在这个根目录下执行： . ├── archetypes # 内容类型，在创建新内容时自动生成内容的配置 ├── content # 网站内容，Markdown 文件 ├── data ├── layouts # 网站模版，选择主题后会将主题中的 layouts 文件夹中的内容复制到此文件夹中 ├── static # 包含 CSS、JavaScript、Fonts、media 等，决定网站的外观。选择主题后会将主题中的 ststic 文件夹中的内容复制到此文件夹中 ├── themes # 存放主题文件 └── config.toml # 网站的配置文件 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:2","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅲ 安装主题 你可以不执行这一命令使用默认主题。 安装主题有三种方式： 直接下载主题压缩文件，解压到 theme/ 目录下。 通过 git submodule(推荐) 或 git clone 安装： 通过 Hugo Modules 安装，需本机安装 GO 1.12 及以上版本，略。 git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 安装后需要启用主题，方法是将主题名称写入到根目录下的默认配置文件 config.toml： echo 'theme = \"LoveIt\"' \u003e\u003e config.toml 或 cp themes/LoveIt/exampleSite/config.toml . #这里需要修改主题路径 themeDir 配置，将其注释掉 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:3","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"Ⅳ 启动 Hugo 预览服务器 Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。 hugo server -D 添加 -D 选项以输出草稿状态的文章，执行后可通过 http://localhost:1313/ 访问站点 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:3:4","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"通过 GitHub Pages 发布 此段为科普，帮助理解，可跳过。 这一步 Hugo 的官方文档在 Host on GitHub 中进行了详细的介绍，并且还很贴心的提供了自动化操作的 Shell 脚本。有两种方式： 通过个人主页发布：必须创建一个 \u003cUSERNAME\u003e.github.io 仓库来托管生成的静态内容，发布后的域名为 https://\u003cUSERNAME\u003e.github.io。 通过项目主页发布：可以随意创建 \u003cPROJECT_NAME\u003e 仓库，发布后的域名为 https://\u003cUSERNAME\u003e.github.io/\u003cPROJECT_NAME\u003e。 建议非特殊情况下使用第 1 种方式，原因是许多主题都不能很好的支持第 2 种，具体来说是将 config.toml 的 baseURL 设置为含子路径的地址时，不能正确的处理所有资源的构建位置。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:4:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"通过 GitHub Actions 自动部署 目前我们的「创作-发布」流程如下： 在项目仓库编辑原始内容并进行版本管理。 执行自动脚本生成静态站点并推送到个人主页仓库完成发布。 这套流程已经很流畅，但还有一些改进空间：我们可以使用 GitHub Actions，在每次向远程的项目仓库推送原始内容更改时自动执行第 2 步进行发布。 GitHub 上有许多这类自动化部署任务的开源 Actions 项目，我们选择了其中一个简单易用的 GitHub Actions for Hugo。具体的操作步骤截图和详细配置项可以查看该项目的 README。下面简单介绍下配置过程： 点击上面 Actions \u003e New workflow 按钮，直接将以下文件贴进去，修改仓库名和域名即可。 name:Deploy Hugo Site to Github Pages on Main Branchon:push:branches:- main # Set a branch to deployjobs:build-deploy:runs-on:ubuntu-latest # 镜像steps:- name:checkout # 步骤声明，可省略uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'latest'extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}# 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名external_repository:goatup/goatup.github.io # Pages 远程仓库 CNAME:zhongyang.online # custom domain，换成自己的域名keep_files:false# remove existing filespublish_dir:./public# 发布文件夹publish_branch:main # deploying branchcommit_message:${{ github.event.head_commit.message }} ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:5:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"测试阶段 ​ 如果你觉得满意没问题之后，可以试着推送文章到 Github 找找 bug： git add .git commit -m \"first commit\"git push -u origin mian # 2021年之前的文章大部分使用 master，不冲突 ​ 因为 Github Actions 执行需要一分钟，看到 goatup.github.io.source 的灯变绿，就 OK 了。自此，搭建就结束了。我们可以访问 Github 为 goatup.github.io 仓库生成的域名： https://goatup.github.io 查看效果 附带一份 deploy.bat @echo off set pan=.\\public\\ set repo=https://github.com/goatup/goatup.github.io.source.git set branch=main if exist %pan% ( echo \"clean public directory\" rd /S /Q %pan% echo \"Hugo again for new site\" hugo ) else ( echo \"can not find public directory\" echo \"Hugo again for new site\" hugo ) if exist %pan% ( ::cd %pan% echo \"git commit and push\" ::git init git add . git commit -m \"update site at %time%\" echo \"set remote repository and push forcely\" ::git remote add origin %repo% git push -f origin main:main -v ) else ( echo \"can not find public directory, hugo fail!\" ) pause ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:6:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"个人体验 ​ 由于沉迷于挑选主题不能自拔，断断续续的花了一天才把博客上线。咱说实话，hugo 是真没 hexo 的主题多（不能说丑，也就是不好看），最终选的这个还是个烂尾的家伙。不过啊，这速度，快是真快，go 也是真香。估计也就是把自动推送和域名部署完成后，热情就凉凉了。岁月静好！上班摸鱼！两个字，真TM舒服。 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:7:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"},{"categories":["Free-Ride"],"content":"参考 ​ GitHub博客绑定自定义域名 ","date":"2021-07-02","objectID":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/:8:0","tags":["Blog","Hugo"],"title":"白嫖系列之博客","uri":"/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%9A%E5%AE%A2/"}]